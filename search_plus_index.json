{"./":{"url":"./","title":"Vue 教程","keywords":"","body":"前言 前端和后端 用一个例子介绍一下前后端。假设现在访问教务系统，浏览器展示登录界面，我们输入学号和密码，点击登录，账号密码正确即可进入。这个过程都经历了什么呢？ 首先，初始访问时，网页端会查询本地浏览器是否存有登录信息缓存，如果在不久前登录过，会记录用户信息，则这次访问将直接展示网页内容，无需登录。如果查无用户信息，或登录信息过期失效，则网页端跳转登录路由，显示登录界面。输入学号密码，点击登录按钮，此时网页端会向服务器发送登录请求，由服务器端查询数据库，验证账号密码是否正确，将结果返回网页端。网页端收到正确信号后，跳转至教务系统网页，收到错误信号则提示账号或密码错误。 这个访问的例子，我从前后端的角度解释，因此未提及DNS解析等其它的内容。在上面的描述中，网页端和服务器端可以理解为前端和后端，不难看出它们各自负责的任务： 前端：与浏览器联系，负责渲染页面内容，跳转路由，存取浏览器缓存，与后端（服务器端）交互 后端：负责存取数据库信息，处理复杂数据，响应前端的请求 关于 Vue 了解了前后端，再来说一说本教程讲的 Vue。 Vue 是编写前端项目的一个框架，官网的介绍如下： Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 初学者不需要刻意理解这个官方解释，只需要知道，我们将借助 Vue CLI 脚手架来搭建 Vue 项目框架，从而编写前端项目，完成在前面所讲述的前端任务。 关于本教程 在本教程中，你能学到或不能学到： Skill Able/Unable Vue 框架的基本介绍 ✅ Vue 开发的基础能力 ✅ 可以用来点睛的前端技巧 ✅ 最基础的 HTML/CSS/JS 代码 ❌ 与其它网上教程不同的是，本作品尽可能手把手演示项目的创建和基本介绍，达到快速入门的效果。同时，在开发中我所用到的一些奇巧的插件或技巧，都会在这里记录。 License 本作品采用 CC BY-NC-SA 4.0 进行许可。 Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part0/01-install_vue.html":{"url":"post/part0/01-install_vue.html","title":"Vue 安装","keywords":"","body":"Vue 安装 使用 Vue.js 的方式有很多，包括直接用 script 标签引入、使用 CDN 方法引入、NPM 方法安装等。在一般较大的项目开发中，都会采取后者，这里也仅对 NPM 安装方式进行介绍。 NPM 是 Nodejs 下的包管理器，具备命令行接口和软件注册中心 (registry)，使用 npm 可以安装、管理、运行 packages，为项目代码适配 packages 等。本教程常用的是用它来安装环境包（如 vue-cli），以及运行 vue 等前端项目（npm run serve）。 下载 NPM，有两种方法，直接下载使用一个特定版本，或安装 NVM（npm version manager）可管理多个 NPM 版本环境。我推荐的是使用 NVM 安装。原因是 Nodejs 版本更新快，向前兼容性较差，很容易平时使用的版本无法安装某个插件环境。比如 v14 安装了 vue 环境，此时想在本地安装 gitbook 环境，发现很多插件要求 v10，如果采用的单一版本就无法使用这些插件。而 nvm 就是类似 conda 的环境管理器，允许在一台机器拥有多个 NPM 版本环境。 不想采用 NVM 安装方法，文末有推荐直接安装 NPM 的博客链接 下载 NVM 若本地有 Nodejs 环境，下载 NVM 前需先卸载！ 第一步，下载最新版 nvm，链接如下： Windows 版本：https://github.com/coreybutler/nvm-windows/releases Mac 版本：https://github.com/nvm-sh/nvm#install--update-script 下载时注意安装路径不能出现空格，最好不要用中文路径！ 安装完成后，输入下列命令验证是否安装成功： nvm --version 接下来，将 npm 包的下载源地址更改为淘宝镜像。打开 nvm 安装文件夹，在文件夹下的 settings.txt 文件中添加： node_mirror: http://npm.taobao.org/mirrors/node/ npm_mirror: https://npm.taobao.org/mirrors/npm/ NVM 常用命令 给出一些常用的 nvm 命令： nvm --version # 查看nvm版本 nvm install latest # 安装最新版 nodejs nvm install # 安装指定版本 For examle: nvm install v14.16.0 nvm ls # 查看已安装的 nodejs 版本 nvm use v14.16.0 # 切换使用 v10.13.0 版本 nvm alias default 14.16.0 # 设置默认版本 使用 Nvm 安装 Nodejs 使用 nvm install 命令安装 Nodejs，这里以 14.16.0 版本为例： nvm install v14.16.0 等待较短时间后，即安装成功。 接下来输入： nvm use v14.16.0 npm --version 可确认 npm 是否安装成功。 安装 Vue 环境 输入以下命令，安装 vue.js、vue-router、vue-cli 脚手架到 global 全局目录： npm install vue -g npm install vue-router -g npm install -g @vue/cli 使用 vue-cli 创建 vue 项目： vue create my-project # 这里需要进行一些配置，可选择 vue2 或 vue3，后面文章再提 进入项目，安装并运行： cd my-project npm install npm run serve 成功运行后，访问 http://localhost:8080/ 即可看到 vue 项目的默认界面。 如果 8080 端口被占用，这里的端口可能会改变，实际以终端提示为主 后言 1. 安装 Vue 的其它方式 如果不想采用本文章所讲的『Nvm管理和Npm安装』的方式，可以参考以下链接直接安装 NPM： 安装Node.js和npm - 廖雪峰的官方网站 Vue.js 安装 - 菜鸟教程 2. 关于 Nvm 的实现方式 如果安装了多个 Nodejs 版本，可以看到 nvm 目录下有多个版本对应的目录，比如 v10.13.0、v14.16.0 等；安装时选择了两次路径，第二次设置的是当前使用的 Nodejs 环境，可以看到安装后它是一个快捷方式，指向 nvm 目录下的某个版本。 3. Npm 安装包速度慢的问题 不管是使用 Nvm 管理还是直接下载 Npm，都可能会遇到 Npm 安装依赖速度慢的问题，原因是 Npm 官方镜像服务器在海外，当然如果你有科学上网的工具，应该没这个问题。国内加速访问可以通过以下命令指定 Npm 安装镜像为淘宝镜像： npm config set registry https://registry.npm.taobao.org var gitalk = new Gitalk({ \"clientID\": \"27273cfa4e0ffa52e2ac\", \"clientSecret\": \"ce2b2e78b2cd9dca945adf4d65a3b99248c7b2c4\", \"repo\": \"Vuebook\", \"owner\": \"Super-BUAA-2021\", \"admin\": [\"Super-BUAA-2021\",\"ZewanHuang\"], \"id\": window.location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part0/02-project_init.html":{"url":"post/part0/02-project_init.html","title":"Vue 项目创建","keywords":"","body":"Vue 项目创建 Vue 项目的创建方式，与习惯使用的编辑器有一定的关系。我一般使用 WebStorm 进行前端开发，因此常用它来创建 Vue 项目；而使用 VS Code 的一般会用终端命令来创建。下面对两种方式都介绍一下。 终端命令 使用 Vue CLI 创建 vue 项目： vue create vue-project # [vue-project] 为项目名称 选择项目模式，本教程将首先介绍 Vue2 的使用，因此在这里选择第一项。这里的 router 表示路由管理，vuex 表示前端缓存管理，后续的开发会使用到，因此选择该项。 等待片刻后，初始化项目成功。 输入图中终端提示的命令，进入目录： cd vue-project 本地运行项目： npm run serve 如需打包部署到服务器上，则输入： 关于 build 命令在部署时需要使用，后面文章可能会讲到 npm run build WebStorm创建 打开 WebStorm，点击 File -> New Project，选择 Vue.js，设置路径和 Node 解释器、Vue CLI（一般会自动识别）后，点击 Create。在这里，我一般会勾选掉 Use default project setup，以便在后续选择配置。 和终端方式类似，创建后会提示选择： 选择第一项，回车。等待片刻后，创建成功，WebStorm 界面如下： 点击右上角的“开始”按钮，就可运行项目。 我们可以配置同样的方式来打包项目以便部署。点击右上角“开始”按钮旁的下拉框，选择 Edit Configurations，如下图配置： 点击OK后，可以在右上角看到build的字样。在下拉框可以选择serve或build，后点击“开始”按钮即可运行或打包。 使用哪种方式创建项目都可以，当然也可以终端命令创建后用 WebStorm 打开，全看个人开发习惯。我个人更喜欢 Jetbrains 软件的界面，因此习惯使用 WebStorm 开发前端。 Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part1/01-vue2-structure.html":{"url":"post/part1/01-vue2-structure.html","title":"Vue 项目初识","keywords":"","body":"Vue 项目初识 上篇文章创建了一个初始的 Vue2 项目，本文对这个几乎空白的项目框架进行简要介绍。 阅读本文时并不要求理解各部分是如何编写的，只大致了解它们的用途，在下一篇文章将用一个实例来展示如何使用。 目录/文件 说明 node_modules npm 加载的项目依赖模块 public 静态资源，build 构建后为根目录，含网站导航栏图标、首页入口文件 src 开发做的事情基本都在这个目录下，含： • assets: 放置一些图片、字体等资源  • components: 放置组件文件，一般为全局组件 • router: 网站路由跳转设置 • store: 前端数据存储 • views: 放置各页面文件 • App.vue: 项目入口文件 • main.js: 项目的核心文件，在这里可以导入各种全局依赖 .xxx文件 配置文件，包括语法配置、git配置(.gitignore)等 package.json 项目配置文件 README.md 项目的说明文档 下面对主要模块进行讲解。 node_modules node_modules 目录下放置项目所需要的依赖环境，当使用 npm install packageName --save 命令给项目添加依赖时，信息会记录于 package.json 文件的 dependencies 中，而依赖的包将存储于 node_modules。 在该目录下，可以发现有我们在创建项目时选择的 vue-router 包，这是用于管理路由跳转的依赖。 在编辑器中可以看到该目录名字显示灰色的，因为它在 .gitignore 是被忽略的。在合作开发项目中，往往使用 git 来协调配合，而该目录内容庞大，且并非由程序员编写，因此往往不加入 git 中，在新机器上使用 npm install，则会根据 package.json 的配置信息生成 node_modules。 public 初始项目中，public 目录下有 favicon.ico 和 index.html 两个文件，前者是网站图标logo，后者是网站首页入口文件，代码如下： favicon.ico\"> We're sorry but doesn't work properly without JavaScript enabled. Please enable it to continue. 上述代码包含了一个网页最基本的信息，在 head 标签中，我们可以编写网站的标题title、编码charset、图标icon、描述description、关键词keywords等信息；在 body 标签中，vue 项目通常只需要包含 ，表示 App.vue 文件。 src assets assets 目录放置项目所需要的资源，如图片、字体等，并由 vue 文件使用。 components components 目录放置项目的全局组件。 在项目开发中，存在部分小模块需要多次复用，比如导航栏、某些样式的按钮等，通常被提取出来作为全局组件。与之对应的是局部组件，通常是某个页面内容较多，使用多个 vue 文件编写，其中某个 vue 文件和其它文件为父子关系，父引入子，实现低耦合的特性。 初始项目中，该目录下有 HelloWorld.vue 文件，可以看到在 views/Home.vue 中，引入了该文件。 在这里也简略说明一下 vue 文件的组成。vue 文件主要由三部分组成： template：html，网页结构内容 script：该vue文件所需的数据对象格式、js方法等 style：css页面样式 router router/index.js 编写路由规则，即赋予 vue 文件相应的相对路由，核心代码为： const routes = [ { path: '/', name: 'Home', component: Home }, { path: '/about', name: 'About', component: () => import('../views/About.vue') } ] 其中，path 为分配的相对路由，component 指定 vue 视图页面。 初始项目运行在 localhost:8080 时，访问 localhost:8080/about 将显示 About.vue 的内容。 store store 目录下主要放置前端存储数据的格式，利用 vuex 和 localStorage 在用户的网页端保存基本的用户信息。例如用户登录之后，将用户名存于前端，这样在渲染网页时可以直接使用，且向后端发送请求时可以携带用户名，以验证用户的登录信息是否有效。 views 在 views 目录下，主要是页面或局部组件的 vue 文件。看初始项目，里面有 About.vue 和 Home.vue，分别对应路由 /about 和 /。简单看一下这两个文件： About.vue：内容很简单，仅包含 html 部分，仅仅是一句话。 This is an about page Home.vue：包含 html 和 script 两部分，可以看到在 script 标签中引入了 HelloWorld 组件，然后在 html 部分中进行调用，这样该页面的效果为，logo 图片加 HelloWorld 组件。 // @ is an alias to /src import HelloWorld from '@/components/HelloWorld.vue' export default { name: 'Home', components: { HelloWorld } } App.vue App.vue 为项目入口文件，该文件描述整个网站将渲染的内容。 Home | About 如上述代码，它由 nav 的代码块和 router-view 组成。前者是两个超链接，有点类似于网站的导航栏，将在各路由下都展示；后者表示根据路由渲染对应的 vue 组件，如果当前是 /about 则渲染 About.vue 文件描述的内容。 main.js main.js 是项目的核心文件，在这里可以导入各种全局依赖。比如全局导入 elementUI 等UI组件或 ECharts 可视化图标库等，npm install 后将在该文件中全局引入。 以上介绍了 vue2 项目创建初始的各模块用途，掺杂了部分代码编写的指示，并不要求完全理解。在下一篇文章中，将会在初始项目的基础上编写一个登录页面，以帮助初学者更快入门。 var gitalk = new Gitalk({ \"clientID\": \"27273cfa4e0ffa52e2ac\", \"clientSecret\": \"ce2b2e78b2cd9dca945adf4d65a3b99248c7b2c4\", \"repo\": \"Vuebook\", \"owner\": \"Super-BUAA-2021\", \"admin\": [\"Super-BUAA-2021\",\"ZewanHuang\"], \"id\": window.location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part1/02-instance.html":{"url":"post/part1/02-instance.html","title":"Vue 开发实战一：登录页面","keywords":"","body":"Vue 开发实战一：登录页面 本文将在初始化项目的基础上，编写一个登录页面，并为其设定路由和存储登录信息等。在阅读本文时，建议跟着敲敲代码，以加深对 vue 项目的理解。当然，如果觉得现在就开始写代码有点快，难以理解，也可以先看看后面文章再回来看本文。在这里就开始写代码，主要是为了给初学者提供一个快速入门的途径。 本文代码的仓库：https://github.com/Super-BUAA-2021/vue-template 不熟悉 git 的同学可以看看仓库的 commit 提交记录，理解一次 commit 的时机 添加网站基本信息 首先修改 public/index.html 的内容，在里面添加上本网站的基本信息，如keywords、description等，以及修改网站标题。 Vue Template 注意到，在 body 标签中添加了 style=\"margin:0; padding:0;\"，作用是使网页整体无边界。如果没加上，开发中会发现网站外围有一道较为明显的白色边框。 编写登录页面 在 views 目录下新建 Login.vue 文件，用 WebStorm 新建 vue 文件时，会自动生成如下代码框架： export default { name: \"Login\" } template 标签内：编写 html 内容，即网页的基本结构 script 标签内：编写数据对象格式、方法等 style 标签内：编写 css 样式，对应 template 内的内容 在实践中可以更好地理解这三部分，所以先来试着编写登录页面的基本内容，代码如下： Login Login export default { name: \"Login\", data() { return { username: '', password: '' } }, methods: { click_login() { window.alert(this.username + this.password); } } } 如上述代码， template 标签：定义了一个表单 form，内部展示 Login 的字样，同时有两个 input 供输入和一个 button 作登录按钮； script 标签： 添加 data，定义数据对象 username 和 password，分别绑定表单中的两个 input 添加 methods，定义方法 click_login，与按钮绑定，当用户点击按钮时，浏览器将弹窗展示 username 和 password 的值 添加路由 在编写完上面登录页面的基本内容后，还无法看到该网页长啥样，需要在 router/index.js 中添加该页面的路由，才能访问到。 只需为 routes 数组添加元素，指明 path、name 等信息： const routes = [ { path: '/', name: 'Home', component: Home }, { path: '/login', name: 'Login', component: () => import('../views/Login') } ] 这样，npm run serve 运行项目后，访问 localhost:8080/login，可以看到编写的页面： 还没写 CSS 样式，是最原生的样貌 美化登录页面 一个好的前端，一定要拿捏 CSS。当然，它不是那么好拿捏的，因为涉及的内容太多了。（水太深）接下来，就试着美化一下。 在前面编写 template 部分时，已为各元素创建了 class 属性，接下来在 style 部分中为相应的 class 编写特定的 CSS样式。 首先，设置表单样式： .form-box { width: 300px; padding: 40px; /* 内边界宽度 */ position: absolute; /* 设置为绝对定位，使下方的top和left生效 */ top: 50%; left: 50%; transform: translate(-50%,-50%); /* 作用见后方描述 */ background: #90b9e5; /* 设置背景颜色 */ text-align: center; /* 表单中内容居中 */ border-radius: 10px; } transform: translate(-50%,-50%); 作用的讲解：当使用top: 50%; left: 50%; 时，是以整个表单的左上角为原点，所以表单不处于中心位置，会偏右下一点。而 translate(-50%,-50%) 作用是，往上（x轴）、左（y轴）移动自身长宽的 50%，这样表单就刚好位于正中间。 因此上述代码的 position~transform 是使表单在页面中央。 接着将 Login 字样全部大写： 其实直接在 template 标签内把 login 大写也可 .form-box h1 { text-transform: uppercase; /* 将字体全部设置成大写字母 */ } 设置用户名输入框和密码输入框的样式： .form-box .username, .form-box .password { border-radius: 24px; /* 边框四个角的弧度 */ border: 2px solid #3498db; /* 边框厚度和颜色 */ background: none; display: block; margin: 20px auto; /* 外边界 */ text-align: center; padding: 14px 10px; /* 内边界 */ width: 200px; outline: none; color: white; /* 设置输入框中竖线的颜色 */ transition: 0.25s; /* 设置元素过渡效果 */ } 设置文本框获得焦点时的样式，即用户点击时输入框的样式，focus设置的样式会在原样式基础上进行覆盖修改： .form-box .username:focus,.form-box .password:focus{ border-color: #2ecc71; /* 边框颜色 */ } 设置提交按钮的样式： .form-box .login{ border-radius: 24px; border: 2px solid #0b95f1; background: none; display: block; margin: 20px auto; padding: 14px 40px; outline: none; transition: 0.25s; cursor: pointer; /* 设置光标的样式 */ } 刷新网站，可以发现登录页面终于有点拿得出手了。 后言 我认为前端的主要任务有两个： 编写和美化页面 编写函数方法，包括响应用户的交互事件和请求后端的服务 本文的实战中，只是介绍了第一个任务，未涉及 JavaScript 函数方法的编写，仅用了一个弹框来相应点击登录事件，因此目前还只是空壳一个。 用户输入用户名和密码，点击 Login 按钮，网页获取到点击事件后，调用函数进行处理，也就是本文代码中还未填充的坑 click_login。这个函数需要做的事情通常包含： 验证用户输入的 username 和 password 是否符合规范 将这两个字段发送给后端 获取到后端的响应信息，根据不同的信号进行不同的处理 用户名不存在或密码错误，则提示用户 密码正确，则登录成功，保存用户信息，跳转主页 因为这部分涉及 axios 的使用，后面的文章先对本次实战消化讲解一下，再来填上这个坑。 另外，本文的页面编写没有使用elementUI等UI组件库，而实际开发中使用这些组件库能达到事半功倍的效果，因为它帮我们写好了很多东西，比如样式之类的。在后面讲到UI组件库使用时，会改写登录页面。 var gitalk = new Gitalk({ \"clientID\": \"27273cfa4e0ffa52e2ac\", \"clientSecret\": \"ce2b2e78b2cd9dca945adf4d65a3b99248c7b2c4\", \"repo\": \"Vuebook\", \"owner\": \"Super-BUAA-2021\", \"admin\": [\"Super-BUAA-2021\",\"ZewanHuang\"], \"id\": window.location.pathname, \"distractionFreeMode\": false }); gitalk.render(\"gitalk-container\"); Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part1/03-router.html":{"url":"post/part1/03-router.html","title":"Vue 路由","keywords":"","body":"Vue 路由 Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part1/04-axios.html":{"url":"post/part1/04-axios.html","title":"Vue axios 数据传输","keywords":"","body":"Vue axios 数据传输 Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part1/05-element.html":{"url":"post/part1/05-element.html","title":"Vue 语法语句","keywords":"","body":"Vue 语法语句 Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/part1/06-component.html":{"url":"post/part1/06-component.html","title":"Vue 组件","keywords":"","body":"Vue 组件 Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "},"post/advanced/echart.html":{"url":"post/advanced/echart.html","title":"Echart 图表","keywords":"","body":"Echart 图表 Copyright © blog.zewan.cc 2021 all right reserved，powered by Gitbook该文章修订时间： 2022-01-21 08:18:52 "}}